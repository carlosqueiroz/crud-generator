<?php
 
namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;

use Carbon\Carbon;
use Session;
use Validator;
use DataTables;
use DB;

 
class DummyClass extends Controller
{

    /**
     * Foçando o usuário autenticar
     *
     * @return True or False
     */
    public function __construct()
    {
        $this->middleware('auth');
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {

        return view('{{viewPath}}{{viewName}}.index');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        return view('{{viewPath}}{{viewName}}.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        {{validationRules}}
        ${{crudNameSingular}} = $request->all();
        {{fileSnippet}}
        {{modelName}}::create(${{crudNameSingular}});

        Session::flash('flash_message', '{{modelName}} Cadastrado!');

        return redirect('{{routeGroup}}{{viewName}}');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  int  $id
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update($id, Request $request)
    {
        {{validationRules}}
        ${{crudNameSingular}} = $request->all();
        {{fileSnippet}}
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        ${{crudNameSingular}}->update(${{crudNameSingular}});

        Session::flash('flash_message', '{{modelName}} Atualizado!');

        return redirect('{{routeGroup}}{{viewName}}');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        {{modelName}}::destroy($id);

        Session::flash('flash_message', '{{modelName}} deleted!');

        return redirect('{{routeGroup}}{{viewName}}');
    }


    /**
     * List Datatables.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function list()
    {
        // Nome da Tabela do Banco de Dados.
        ${{crudNameSingular}} = new {{modelName}};
        $table = ${{crudNameSingular}}->getTable();
        
        //Busca
        $dados = DB::table(''.$table.'')
             ->select(''.$table.'.*');
              return Datatables::of($dados)
                ->addColumn('action', function ($dados) {
                return '
                <a style=""  href="'.str_replace("/list", "", url()->current()).'/'.$dados->id.'/edit"><img src="'.asset('assets/_con/images/edit.png').'"  height="15" width="15"></a>
                <a style=""   oncLick="excluir('.$dados->id.');"><img src="'.asset('assets/_con/images/close.png').'"  height="15" width="15"></a>  
                    ';
            })
              ->make(true) ;
    }



}
